** This is a small code for verifying syntactic correctness of an empty driver and an empty module **
<<<driver program>>>
start
while(true)
      start
		declare a :integer;
            a := 5;
      end
declare x :integer;
while(5<6)
      start
            x := 5;
            x := x + 1;
            x := x - 1;
      end

for(i in 10 .. 1)
      start
            declare a , b, c :integer;
            a := 5;
            b := 6;
            c := a + b - 5;
      end
for (i in 1 .. 10)
      start
            declare a , b, c :integer;
            a := 5;
            b := 6;
            c := a + b - 5;
            declare bolle :boolean;
            bolle := true AND false OR 3 < 5;
            switch(bolle)
            start
            case true: declare a :integer;
                  a := 5;
                  break;
            case false: declare a :integer;
                        a := 5;
                        break;
            end
      end
      declare a :integer;
      a := 2;
      switch(a)
      start
      case 1: declare a :integer;
            a := 5;
            break;
      case 2: declare a :integer;
                  a := 5;
                  break;
      default: declare d :integer;
                  d := 5;
                  break;
      end

end
**<<module empty>>
takes input[a:boolean];
start

end
**
** print the following message on the console
      " Input source code is syntactically correct.........."
**

** Also print the parse tree in the format given in function description of printParseTree().[refer interface details]**

** The inorder traversal for an n‐ary tree can be seen as follows

Leftmost child ‐‐> parent node‐‐> remaining siblings (excluding the leftmost)**

** The above tree construction needs to be verified with manually created tree on paper for the above input using the given grammar. You can try using a A3 sized paper and draw the parse tree. work out the inorder traversal and verify your parser output **
